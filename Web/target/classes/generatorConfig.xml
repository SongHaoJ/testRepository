<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。
      还有重要的就是我们要生成的实体类所对应的的表或者试图 -->
<generatorConfiguration>
    <properties resource="mybatis_generator.properties" />
    <!--死活读不到maven的jar包，只能读个绝对路径-->
    <classPathEntry location="D:\oracle\product\11.2.0\dbhome_1\jdbc\lib\ojdbc6.jar" />
    <context id="MBG" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
                javaClientGenerator?,table+ -->
        <property name="autoDelimitKeywords" value="false" />

        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin">
            <property name="suppressJavaInterface" value="false" />
        </plugin>
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!--导入自己的plugin-->
        <!--<plugin type="com.bean.plugin.MyPlugin"/>-->
        <plugin type="com.bean.plugin.DaoPlugin"/>
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true" />
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>
        <!-- 数据库连接 -->

        <jdbcConnection
                driverClass="${jdbc_driver2}"
                connectionURL="${jdbc_url2}"
                userId="${jdbc_username2}"
                password="${jdbc_password2}">
        </jdbcConnection>
        <!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="${modelPackage}" targetProject="${javaProject}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="${xmlProject}" >
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${daoMapperPackage}" targetProject="${javaProject}" >
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!-- 表名对应生成的实体 (tableName="%" 会生成所有表)-->
        <!--oracle 加上schema属性-->
        <table tableName="%" schema="eshop" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" enableInsert="false"
               enableUpdateByPrimaryKey="false" enableDeleteByPrimaryKey="false">
            <!--去掉schema的开头-->
            <property name="ignoreQualifiersAtRuntime" value="true"/>
            <!--java关键字替换-->
            <columnOverride column="class" property="dbClass"/>
            <columnOverride column="package" property="dbPackage"/>
        </table>
<!--    可选 （至少要生成一个语句）：
        1，schema：数据库的schema；
        2，catalog：数据库的catalog；
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
        5，enableInsert（默认true）：指定是否生成insert语句；
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
        13，modelType：参考context元素的defaultModelType，相当于覆盖；
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
-->

        <!-- enableCountByExample="false" enableUpdateByExample="false"
        enableDeleteByExample="false" enableSelectByExample="false"
        selectByExampleQueryId="false">  指定是否生成操作数据库对应的方法 -->

    </context>
</generatorConfiguration>