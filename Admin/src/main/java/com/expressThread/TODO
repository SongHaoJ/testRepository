
    @Override
    public void run() {

        try {
            RetCode rt0 = edisService.findexpressconfig("EdisEbay");
            @SuppressWarnings("unchecked")
            ArrayList<DbExpressconfig> configlist = (ArrayList<DbExpressconfig>) rt0.getObj();
            DbExpressconfig obj = new DbExpressconfig();
            // 如果没有配置，增加edis的配置
            if (rt0.getCode() == 1000 || (rt0.getCode() == 0 && rt0.getObj() != null)) {
                if (rt0.getCode() == 0) {
                    obj = configlist.get(0);
                }
                if (obj.getOpenflag() == 1) {
                    while (true) {
                        int result = 1;
                        try {
                            // 初始化Edis数据表
                            if (initTableFlag) {
                                this.initTable();// 初始化Edis渠道表结构
                                result = this.getChannel();
                                if (result == 1) {
                                } else if (result == 0) {
                                } else {
                                    Thread.sleep(60 * 60 * 1000);
                                }
                            }
                            if (result != -1) {
                                initTableFlag = false;// 初始化表结构之后 进行调取接口

                                this.createOrder(200);// 创建物流订单到Edis 获取运单号

                                // 提交订单的时候是可以直接获取到跟踪单号的，但是为了确保订单可以正常发货，后面还是会去调查询接口，查询订单状态
                                // zyj 20171117
                                Thread.sleep(10 * 1000);
                                this.getTackingnumber(200);// 确认物流订单到Edis 获取运单号
                                /**
                                 * 获取标签 zyj 20171117
                                 */
                                try {
                                    RetCode rtCode = ebayMgr.findEdisEbayLabelInfo(200);
                                    if (rtCode.getObj() != null && rtCode.getCode() == 0) {
                                        // 找到获取标签的任务，开始调接口获取标签
                                        @SuppressWarnings("unchecked")
                                        ArrayList<DbAsktradernumber> list = (ArrayList<DbAsktradernumber>) rtCode
                                                .getObj();// 等待打印标签的运单号
                                        int count = 1;
                                        for (DbAsktradernumber express : list) {
                                            try {

                                                writerlog("lable", "正在获取标签的订单：" + express.getOrderid()
                                                        + "=================================");
                                                RetCode rtLabel = labelRequestData(express);
                                                // RetCode rtLabel =
                                                if (rtLabel.getCode() == 0) {

                                                    "获取订单" + express.getOrderid() + "标签成功" + rtLabel.getDesc());
                                                    String sql = "update  db_asktradernumber set customertel1='3', errdescr='获取运单号成功;获取标签成功',field1='获取运单号成功;获取标签成功' where orderid='"
                                                            + express.getOrderid() + "' and ordertype='EdisEbay'";
                                                    ebayMgr.updateExecuteSQL(sql);
                                                    writerlog("lable", "订单：" + express.getOrderid() + "运单号："
                                                            + express.getExpressid() + "获取标签成功！");
                                                    writerlog("lable", "sql语句：" + sql);
                                                    // 成功，需要更新label描叙
                                                } else if (rtLabel.getCode() == 999) {// 999订单是因为PDF大小为0KB，这种订单要重新下载PDF文件；
                                                    // zyj
                                                    // 20170512
                                                    String sql = "update  db_asktradernumber set errdescr='获取运单号成功';重新下载PDF,原因："
                                                            + rtLabel.getDesc().replace("'", "")
                                                            + "',field1='获取运单号成功';重新下载PDF,原因："
                                                            + rtLabel.getDesc().replace("'", "") + "' where orderid='"
                                                            + express.getOrderid() + "' and  ordertype='EdisEbay'";
                                                    ebayMgr.updateExecuteSQL(sql);
                                                    writerlog("lable",
                                                            "订单：" + express.getOrderid() + "运单号："
                                                                    + express.getExpressid() + "获取标签失败，原因："
                                                                    + rtLabel.getDesc().replace("'", ""));
                                                    writerlog("lable", "sql语句：" + sql);
                                                } else {
                                                    "获取订单" + express.getOrderid() + "标签失败" + rtLabel.getDesc());
                                                    String sql = "update  db_asktradernumber set customertel1='7', errdescr='获取运单号成功;获取标签失败,"
                                                            + rtLabel.getDesc().replace("'", "")
                                                            + "',field1='获取运单号成功;获取标签失败,"
                                                            + rtLabel.getDesc().replace("'", "") + "' where orderid='"
                                                            + express.getOrderid() + "' and  ordertype='EdisEbay'";
                                                    ebayMgr.updateExecuteSQL(sql);
                                                    writerlog("lable",
                                                            "订单：" + express.getOrderid() + "运单号："
                                                                    + express.getExpressid() + "获取标签失败，原因："
                                                                    + rtLabel.getDesc().replace("'", ""));
                                                    writerlog("lable", "sql语句：" + sql);
                                                }
                                                count++;
                                            } catch (Exception e) {
                                                String sql = "update db_asktradernumber set customertel1='7',  errdescr='获取运单号成功;获取标签异常,"
                                                        + e.getMessage().replace("'", "") + "',field1='获取运单号成功;获取标签异常,"
                                                        + e.getMessage().replace("'", "") + "' where orderid='"
                                                        + express.getOrderid() + "' and ordertype='EdisEbay'";
                                                ebayMgr.updateExecuteSQL(sql);
                                                writerlog("lable",
                                                        "订单：" + express.getOrderid() + "运单号：" + express.getExpressid()
                                                                + "获取标签异常，异常信息：" + e.getMessage().replace("'", ""));
                                                writerlog("lable", "sql语句:" + sql);
                                            }

                                        }
                                    } else {
                                    }
                                } catch (Exception e) {
                                }

                                Thread.sleep(180000);
                            }

                        } catch (InterruptedException e) {
                            log.info("Thread error:" + e.getMessage());
                        } catch (Exception e) {
                            log.info("error:" + e.getMessage());
                        }
                    }
                } else {
                    Thread.sleep(60 * 60 * 1000);
                }
            } else {
                Thread.sleep(60 * 60 * 1000);
            }
        } catch (Exception e) {
        }
    }

    /**
     * 先创建物流订单 发给Edis
     *
     * @param recordnum
     * @return
     */
    @SuppressWarnings("unchecked")
    public void createOrder(int recordnum) {
        // 第一步查出需要交运Edis物流的订单
        RetCode rt = ebayMgr.getAskTradernumberForExpress("EdisEbay", recordnum, 0);
        RetCode exp = this.queryExpresstype(rt);// 查询货运方式
        if (0 == exp.getCode() && null != exp.getObj()) {
            ArrayList<DbExpresstype> expresstype = (ArrayList<DbExpresstype>) exp.getObj();
            if (null != expresstype && expresstype.size() > 0) {
                this.setDeclaredValue(expresstype.get(0));// 设置货运方式
                this.setExpressSequenceid(expresstype.get(0).getSequenceid());// 设置货运方式ID
            }
        }
        // 获取这些订单的集合
        ArrayList<UserBean> list = (ArrayList<UserBean>) rt.getObj();
        // 如果订单集合不为空 并且长度大于0 则开始调取接口
        if (list != null && list.size() > 0) {
            try {
                int i = 0;

                for (UserBean userBean : list) {
                    // 提交订单时，在order表更新提交时间 xbtime3
                    try {
                        String orderid = userBean.getAskNumber().getOrderid();
                        RetCode rtXbtime = ebayMgr.updateXbtime3(orderid);
                        if (rtXbtime.getCode() == 0) {
                        } else {
                        }
                    } catch (Exception e) {
                        ;
                    }
                    try {
                        this.checkIdenticalExpresstype(userBean.getAskNumber().getOrderid(), exp);
                        i++;
                        // 获取交运的订单信息和商品信息
                        RetCode rtOrder = ebayMgr.getOrderAndSells(userBean.getAskNumber().getOrderid());

                        writerlog("commit",
                                "订单" + userBean.getAskNumber().getOrderid() + "详情信息：" + JSON.toJSONString(rtOrder));
                        // 如果订单和商品信息部位空 则开始调取接接口
                        if (rtOrder.getObj() != null) {
                            Boolean b = false;
                            ExpressBean eb = (ExpressBean) rtOrder.getObj();
                            if (channelMap.containsKey(userBean.getAskNumber().getExpresstypeid())
                                    && channelMap.get(userBean.getAskNumber().getExpresstypeid()) != null) {
                                DbEdisExpressType express = channelMap.get(userBean.getAskNumber().getExpresstypeid());
                                List<DirectionsResponses> list2 = express.getDirectionList();
                                for (DirectionsResponses dr : list2) {
                                    if (dr.getFrom().equals(eb.getOrder().getCustomerqq())) {
                                        b = true;
                                        break;
                                    }
                                }
                            }
                            if (b) {
                                String updateSql = "update db_asktradernumber set errflag='98' "
                                        + "  ,errdescr='提交订单异常：国家不支持" + "',field1='提交订单异常：国家不支持" + "'  where orderid='"
                                        + userBean.getAskNumber().getOrderid() + "' and ordertype='EdisEbay'";
                                ebayMgr.updateExecuteSQL(updateSql);
                            } else {
                                addPackage(eb, userBean);
                            }
                        } else {
                            // 订单信息为空
                        }
                    } catch (Exception e) {
                        String updateSql = "update db_asktradernumber set errflag='98' " + "  ,errdescr='提交订单异常："
                                + e.getMessage() + "',field1='提交订单异常：" + e.getMessage() + "'  where orderid='"
                                + userBean.getAskNumber().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                        writerlog("commit",
                                "订单" + userBean.getAskNumber().getOrderid() + "提交异常：" + JSON.toJSONString(e));
                    }
                }

            } catch (Exception e) {
                this.writerlog("commit", "订单异常-->" + new Date() + ":" + e.getMessage());
                System.out.println("异常-->：" + e.getMessage());
            }
        }

    }

    /**
     * 获取订单对应货运方式里设置的最小最大值集合
     *
     * @param rc
     * @return
     */
    @SuppressWarnings("unchecked")
    public RetCode queryExpresstype(RetCode rc) {
        RetCode rt = new RetCode(1000, "货运方式查询失败", null);
        try {
            StringBuffer sqlFilter = new StringBuffer("'");
            if (0 == rc.getCode() && null != rc.getObj()) {
                ArrayList<UserBean> list = (ArrayList<UserBean>) rc.getObj();
                if (null != list && list.size() > 0) {
                    int index = 0;
                    for (UserBean d : list) {
                        if (index != list.size() - 1) {
                            sqlFilter.append(Sys.isCheckNull(d.getAskNumber().getOrderid()) + "','");// 获取订单编号
                        } else {
                            sqlFilter.append(Sys.isCheckNull(d.getAskNumber().getOrderid()) + "'");
                        }
                        ++index;
                    }
                    RetCode extp = ebayMgr.findDeclaredValue(sqlFilter.toString());// 查找货运方式
                    if (0 == extp.getCode() && null != extp.getObj()) {
                        if (extp.getDetail() != null && extp.getDetail().length() > 0) {
                            try {
                                String sequenceids = extp.getDetail();
                                String updateSql = "update db_expresstype set nameen='SpeedPak' where sequenceid in("
                                        + sequenceids + ")";
                                ebayMgr.updateExecuteSQL(updateSql);
                            } catch (Exception e) {
                                ;
                            }

                        }
                        rt.setCode(0);
                        rt.setDesc("查询成功");
                        rt.setObj(extp.getObj());
                    } else {
                        rt.setCode(1000);
                        rt.setDesc(extp.getDesc());
                    }
                } else {
                    rt.setCode(1000);
                    rt.setDesc("订单查询失败");
                }
            } else {
                rt.setCode(1000);
                rt.setDesc("订单查询失败");
            }
        } catch (Exception e) {
            rt.setCode(999);
            rt.setDesc("DownEUBThread.queryExpresstype方法Exception异常:" + e.getMessage());
        }
        return rt;
    }

    /**
     * 获取最小值和最大值
     *
     * @param e
     */
    public void setDeclaredValue(DbExpresstype e) {
        if (null != e) {
            this.declaredValueMinUSD = e.getDeclaredvaluemin();
            this.declaredValueMaxUSD = e.getDeclaredvaluemax();
        } else {
            this.declaredValueMinUSD = 0D;
            this.declaredValueMaxUSD = 0D;
        }
    }

    /**
     * 验证订单的货运方式是不是跟上一个订单一直，如果货运方式一致，就直接用上个订单的最小最大申报金额
     *
     * @param orderid
     * @param expresstype
     * @oper zyj 20171129
     */
    @SuppressWarnings("unchecked")
    public void checkIdenticalExpresstype(String orderid, RetCode expresstype) {
        try {
            if (0 == expresstype.getCode() && null != expresstype.getObj()) {
                ArrayList<DbExpresstype> list = (ArrayList<DbExpresstype>) expresstype.getObj();
                orderid = Sys.isCheckNull(orderid);
                for (DbExpresstype e : list) {
                    // 读取订单编号
                    if (orderid.equals(Sys.isCheckNull(e.getCode()))) {
                        // 如果当前订单的货运方式与第一个订单的货运方式相同，就返回true，采用第一个货运方式中的申报价值的设置，中断循环
                        if (e.getSequenceid().equals(this.getExpressSequenceid())) {// 货运方式相同
                        } else {// 货运方式不相同
                            // 重新设置一下货运方式更新一下货运方式
                            this.setDeclaredValue(e);
                            this.setExpressSequenceid(e.getSequenceid());
                        }
                        break;// 找到后就跳出循环
                    } else {
                        continue;// 订单编号不相同，直接进行下一次循环
                    }
                }
            }
        } catch (Exception e) {
        }
    }

    public RetCode findLabelInfom(String trackingnumber, String orderid) {
        RetCode rt = new RetCode(1000, "获取失败", "获取失败");
        try {
            APIWebServiceStub apiWebServiceStub = new APIWebServiceStub(url);
            GetLablesUrl getLablesUrl = new GetLablesUrl();
            getLablesUrl.setOrderNo(trackingnumber);
            GetLablesUrlResponse response = apiWebServiceStub.GetLablesUrl(getLablesUrl);
            JSONObject pdfJsonObject = JSONObject.fromObject(response);
            String getLablesUrlResult = pdfJsonObject.getString("getLablesUrlResult");
            this.writerlog("lable", "订单：" + orderid + "获取标签信息返回数据：" + getLablesUrlResult);
            if (Sys.isNotNull(getLablesUrlResult)) {
                JSONObject urlresultJsonObject = JSONObject.fromObject(getLablesUrlResult);
                String successflag = urlresultJsonObject.getString("success");
                if ("true".equals(successflag)) {
                    String TrackingNo = urlresultJsonObject.getString("TrackingNo");// 服务商跟踪号
                    if (Sys.isNotNull(TrackingNo)) {
                        rt.setCode(0);
                        rt.setDetail(TrackingNo);
                    } else {
                        rt.setCode(999);
                        rt.setDesc("服务商跟踪号为空,稍后继续获取");
                    }
                } else {
                    rt.setCode(1000);
                    rt.setDesc("获取标签失败：" + getLablesUrlResult);
                }
            } else {
                rt.setCode(1000);
                rt.setDesc("获取标签返回信息为空：" + pdfJsonObject.toString());
            }
        } catch (Exception e) {
            rt.setCode(1000);
            rt.setDesc("调标签接口异常：" + e.getMessage());
        }
        return rt;
    }

    /**
     * 获取令牌
     *
     * @param devId  ebay账户
     * @param secret 密钥
     */
    public String getFetchToken(String devId, String secret, String oldToken) {
        String token = "";
        OAuthApi apiInstance = new OAuthApi();
        FetchTokenResponses result = null;
        try {
            result = apiInstance.fetchToken(url, devId, secret);
            if (result.getStatus().getResultCode() == 200) {
                if (oldToken != null && oldToken.equals(result.getToken())) {
                    token = oldToken;
                } else {
                    String sql = "update DB_EXPRESSAPIUSER set token ='" + result.getToken()
                            + "' where ordertype = 'EdisEbay'";
                    RetCode rtsCode = ebayMgr.updateExecuteSQL(sql);
                    System.out.println("插入语句sql： " + sql);
                    if (rtsCode.getCode() == 0) {
                        token = result.getToken();
                    } else {
                    }

                }
            } else {
                +result.getStatus().getMessage());
            }
        } catch (Exception e) {
        }
        return token;
    }

    /**
     * 获取Edis物流方式
     */
    @SuppressWarnings("unchecked")
    public int getChannel() {
        RetCode rt = ebayMgr.findApikeyNew("EdisEbay");
        int result = 0;
        String token = "";
        String secretkey = "";
        String ebayId = "";
        if (rt != null && rt.getObj() != null) {
            List<DbExpressApiUser> list = (List<DbExpressApiUser>) rt.getObj();

            if (list.size() > 0 && list.get(0) != null) {
                for (int i = 0; i < list.size(); i++) {
                    secretkey = list.get(i).getTOKEN1();
                    ebayId = list.get(i).getACCOUNTNICK();
                    String nToken = this.getFetchToken(list.get(i).getACCOUNT(), secretkey, list.get(i).getTOKEN());
                    if (nToken != null && nToken.length() > 0) {
                        token = nToken;
                    }
                }
            }
        }
        if (token != null && token.length() > 0) {
            ArrayList<DbEdisExpressType> shippingWays = new ArrayList<DbEdisExpressType>();
            try {
                EbayClient client = new DefaultEbayClient(url, token);
                GetServiceListRequest req = new GetServiceListRequest();
                GetServiceListRequestRequestData reqData = new GetServiceListRequestRequestData();
                req.setEbayId(ebayId);
                req.setMessageId("1");
                req.setTimestamp(times);
                reqData.setPageSize(20);
                reqData.setPageNumber(1);
                req.setData(reqData);
                GetServiceListResponses rsp = null;
                try {
                    rsp = client.execute(req);
                } catch (com.eis.client.ApiException e) {
                }
                System.out.println("AAA" + JSON.toJSONString(rsp.getData().getServiceList()));
                List<ServiceInfoResponses> lists = rsp.getData().getServiceList();
                /*
                 * create table db_edisexpresstype ( sid varchar2(50) primary
                 * key,物流服务ID namecn varchar2(200),物流服务名称（中文） nameen
                 * varchar2(200),物流服务名称（英文） maxweight number(10,4),最大承载重量（kg）
                 * maxtotallength number(10,4),三边之和上限（cm） maxlength
                 * number(10,4),最大单边长（cm） supportelec
                 * number(1),是否支持带电（1.0版本）&支持的带电类型（1.5版本） incoterms
                 * number(2),DDP/DDU方式:0 - DDP and DDU;1 -DDP;2 - DDU directions
                 * varchar2(100),{to:目标国家代码,from:起始国家代码} descriptioncn
                 * varchar2(500),物流服务描述（中文） descriptionen
                 * varchar2(500));物流服务描述（英文）
                 */
                /*
                 * "descriptionEn": "<br />", "descriptionZh": "", "directions":
                 * [{ "from": "CN", "to": "US" }, { "from": "CN", "to": "DE" },
                 * { "from": "CN", "to": "GB" }], "incoterms": 0,
                 * "isSupportElec": false, "nameEn": "Standard", "nameZh": "标准",
                 * "serviceId": "ES" }
                 */
                for (ServiceInfoResponses serviceInfoResponses : lists) {
                    DbEdisExpressType deet = new DbEdisExpressType();
                    deet.setIncoterms(serviceInfoResponses.getIncoterms());
                    deet.setSupportelecB(serviceInfoResponses.getIsSupportElec());
                    deet.setNamecn(serviceInfoResponses.getNameZh());
                    deet.setNameen(serviceInfoResponses.getNameEn());
                    deet.setSid(serviceInfoResponses.getServiceId());
                    deet.setDirectionList(serviceInfoResponses.getDirections());
                    shippingWays.add(deet);
                    channelMap.put(deet.getSid(), deet);
                }
                insertEdisExpresstype(shippingWays);
                result = 1;
            } catch (Exception e) {
            }
        } else {
            result = -1;
        }
        return result;
    }

    /**
     * 插入渠道数据到expressapi表中
     *
     * @param shippingWays
     */
    public void insertEdisExpresstype(ArrayList<DbEdisExpressType> shippingWays) {
        try {
            if (shippingWays != null && shippingWays.size() > 0) {
                // 删除所有的该物流公司的物流方式
                String deleteSql = "delete db_edisexpresstype ";
                ebayMgr.updateExecuteSQL(deleteSql);

                // 全部插入数据
                for (int i = 0; i < shippingWays.size(); i++) {
                    StringBuffer sql = new StringBuffer();
                    sql.append(
                            "insert into db_edisexpresstype(sid ,namecn ,nameen ,supportelec,incoterms ,directions ) values('");
                    sql.append("");
                    sql.append(shippingWays.get(i).getSid() + "','" + shippingWays.get(i).getNamecn() + "','"
                            + shippingWays.get(i).getNameen() + "','" + shippingWays.get(i).getSupportelec() + "','"
                            + shippingWays.get(i).getIncoterms() + "','" + shippingWays.get(i).getDirections() + "')");
                    ebayMgr.updateExecuteSQL(sql.toString());
                }
            }
        } catch (Exception e) {
        }
    }

    /**
     * 交运订单到Edis
     *
     * @param eb
     * @param userbean
     */
    public void addPackage(ExpressBean eb, UserBean userbean) {
        try {
            EbayClient client = new DefaultEbayClient(url, userbean.getUser().getTOKEN());
            AddPackageRequest req = new AddPackageRequest();
            List<ItemRequest> itemList = new ArrayList<>();
            ShipToAddressRequest shipToAddress = new ShipToAddressRequest();
            DbEdisExpressType deet = channelMap.get(userbean.getAskNumber().getField4());
            req.setEbayId(eb.getSellBean().get(0).getShop().getEbayshopid());
            req.setMessageId("2");
            req.setTimestamp(times);

            PackageInfoRequest reqData = new PackageInfoRequest();

            // TODO 交运偏好id
            reqData.setConsignPreferenceId(userbean.getAskNumber().getField6());// 交运偏好ID
            reqData.setIncoterms(1);// 国贸条规
            int num = 0;
            String namezn = "";
            String nameen = "";
            Double money = 0d;
            ArrayList<SellBean> list = eb.getSellBean();
            Double resultMoney = 0d;
            Double realMoney = 0d;
            HashMap<String, HashMap<String, Number>> productMap = new HashMap<>();

            for (SellBean sb : list) {
                long num2 = 0l;
                if (sb.getSell().getOrdernum() == null || sb.getSell().getOrdernum() == 0) {
                    num2 = 1l;
                } else {
                    num2 = sb.getSell().getOrdernum();
                }
                if (sb.getProduct().getDeclaredvalue() == null || sb.getProduct().getDeclaredvalue() == 0) {
                    realMoney += 1 * num2;
                    money = 1d * num2;
                } else {
                    money = sb.getProduct().getDeclaredvalue() * num2;
                    realMoney += sb.getProduct().getDeclaredvalue() * num2;
                }
                String ebayItemId = sb.getSell().getEbayitemid();
                if (productMap.size() > 0 && productMap.containsKey(ebayItemId)) {
                    HashMap<String, Number> map = productMap.get(ebayItemId);
                    map.put("money", (Double) map.get("money") + money);
                    map.put("num", (Long) map.get("num") + num2);
                    productMap.put(ebayItemId, map);
                } else if (ebayItemId != null && ebayItemId.length() > 0) {
                    HashMap<String, Number> map = new HashMap<>();
                    map.put("money", money);
                    map.put("num", num2);
                    productMap.put(ebayItemId, map);
                }
            }
            realMoney = realMoney / 6.4;
            resultMoney = realMoney;
            if (declaredValueMinUSD >= 0 && declaredValueMaxUSD > declaredValueMinUSD) {
                resultMoney = resultMoney > declaredValueMinUSD ? resultMoney : (declaredValueMinUSD + 0.01);
                resultMoney = resultMoney < declaredValueMaxUSD ? resultMoney : (declaredValueMaxUSD - 0.01);
            }

            for (SellBean sb : list) {
                if (productMap.containsKey(sb.getSell().getEbayitemid())) {
                    HashMap<String, Number> map = productMap.get(sb.getSell().getEbayitemid());
                    String ebayItemId = "";
                    String transactionId = "";
                    try {
                        num += sb.getSell().getOrdernum();
                        transactionId = sb.getSell().getTransactionid();

                        ebayItemId = sb.getSell().getEbayitemid();

                        money = (Double) map.get("money");
                        if (money == null || money == 0) {
                            money = 1d;
                        }
                        money = money / 6.4;
                        if (declareName == 0) {
                            namezn = sb.getGory().getName();
                            nameen = sb.getGory().getFiled6();
                        } else {
                            namezn = sb.getProduct().getName();
                            nameen = sb.getProduct().getNameen();
                        }
                    } catch (Exception e) {
                        ;
                    }

                    ItemRequest itemRequest = new ItemRequest();
                    SkuRequest sku = new SkuRequest();

                    sku.setWeight(BigDecimal.valueOf(sb.getProduct().getWeight()));// 重量（单位：g）

                    if (realMoney > 0 && resultMoney > 0) {
                        money = money * (resultMoney / realMoney);
                    }
                    money = ((int) (money * 100)) / 100d;
                    sku.setPrice(new BigDecimal(money));// 申报价格的单位固定为美元
                    sku.setSkuNumber(sb.getSell().getProductid());// sku number
                    sku.setOrigin("CH");// 原产地 请参考原产地编码说明
                    sku.setNameZh(namezn);// 中文申报名
                    sku.setNameEn(nameen);// 英文申报名
                    sku.setIsLiBattery(false);// 是否带锂电池（1.0版本）
                    itemRequest.setSku(sku);
                    if (num < 1) {
                        num = 1;
                    }
                    itemRequest.setPostedQty(num);// 寄货数量，不能为0

                    itemRequest.setOrderLineItem(ebayItemId + "-" + transactionId);// eBay交易行ID
                    // eBayitemid-transactionid
                    itemRequest.setTransactionId(transactionId);// eBay交易号
                    itemRequest.setItemId(ebayItemId);// eBay物品号
                    itemRequest.setBuyerId(eb.getOrder().getCustomerid());// eBay买家ID
                    itemList.add(itemRequest);
                    productMap.remove(sb.getSell().getEbayitemid());
                } else {
                    continue;
                }
            }

            reqData.setItemList(itemList);

            shipToAddress.setCity(eb.getOrder().getCustomercity());// 城市
            shipToAddress.setContact(eb.getOrder().getCustomername());// 联系人
            shipToAddress.setCountryCode(eb.getOrder().getCustomerqq());// 国家代码
            shipToAddress.setCountryName(eb.getOrder().getCustomercountry());// 国家名称
            shipToAddress.setMobile(eb.getOrder().getCustomertel1());// 移动电话
            shipToAddress.setPostcode(eb.getOrder().getCustomerzipcode());// 邮编
            if ("DE".equals(eb.getOrder().getCustomerqq())) {
                if (eb.getOrder().getCustomerprovince() != null && eb.getOrder().getCustomerprovince().length() > 0) {
                    shipToAddress.setProvince(eb.getOrder().getCustomerprovince());// 省,国家为德国时可选
                }
            }
            shipToAddress.setProvince(eb.getOrder().getCustomerprovince());// 省,国家为德国时可选
            shipToAddress.setStreet1(eb.getOrder().getCustomeraddress());// 街道地址1
            reqData.setShipToAddress(shipToAddress);// 收件人地址信息
            reqData.setShipFromAddressId(userbean.getAskNumber().getField7());// 发货地址ID
            reqData.setServiceId(deet.getSid());// 物流服务ID
            reqData.setPackageHeight(numConvert(eb.getOrder().getHeight()));// 包裹高度（cm）
            reqData.setPackageLength(numConvert(eb.getOrder().getLength()));// 包裹长度（cm）
            reqData.setPackageWeight(new BigDecimal(eb.getOrder().getOrderweight()));// 包裹重量（g）
            reqData.setPackageWidth(numConvert(eb.getOrder().getWeidth()));// 包裹宽度（cm）
            req.setData(reqData);
            writerlog("commit", JSON.toJSONString(req));
            AddPackageResponses rsp = null;
            try {
                rsp = client.execute(req);

                if (rsp.getStatus().getResultCode() == 200) {
                    String expressid = Sys.isCheckNull(rsp.getData().getTrackingNumber());
                    String packageId = Sys.isCheckNull(rsp.getData().getPackageId());
                    String updateSql = "update db_asktradernumber set errflag = '2', expressid = '" + expressid
                            + "',errdescr='订单提交成功，跟踪号：" + rsp.getData().getTrackingNumber() + "，内部订单号：" + packageId
                            + ",稍后确认',field1='订单提交成功，跟踪号：" + expressid + "，内部订单号：" + packageId
                            + ",稍后确认'  where orderid = '" + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                    ebayMgr.updateExecuteSQL(updateSql);
                    String updateSql2 = "update db_order set  expressid = '" + expressid + "',customerreserve7='"
                            + packageId + "'  where orderid = '" + eb.getOrder().getOrderid() + "'";
                    ebayMgr.updateExecuteSQL(updateSql2);
                    +"物流单号" + rsp.getData().getTrackingNumber());
                    writerlog("commit", "订单号：" + eb.getOrder().getOrderid() + "提交成功，订单返回数据：status:"
                            + JSON.toJSONString(rsp.getStatus()) + "=======data:" + JSON.toJSONString(rsp.getData())
                            + "sql语句：asktradernumber:" + updateSql + "==order:" + updateSql2);
                } else {
                    if (rsp.getStatus().getMessage().indexOf("has been in other package") > 0) {

                        String token = userbean.getUser().getTOKEN();

                        getItemPackageId(eb.getSellBean().get(0), token, deet);
                    } else if (rsp.getStatus().getMessage().indexOf("does not exist") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，物流未同步，稍后再次提交',field1='订单提交失败，物流未同步，稍后再次提交'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                        // nameEn is missing
                    } else if (rsp.getStatus().getMessage().indexOf("nameEn is missing") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，英文申报名错误，请检查商品英文申报名',field1='订单提交失败，英文申报名错误，请检查商品英文申报名'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("Invalid value for weight") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，商品重量错误，请检查商品重量',field1='订单提交失败，商品重量错误，请检查商品重量'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("declaration status is DECLARING") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，预申报未通过，请稍后重新交运',field1='订单提交失败，预申报未通过，请稍后重新交运'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("declaration status is DECLARED_FAILED") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，预申报失败，请联系物流客服询问',field1='订单提交失败，预申报失败，请联系物流客服询问'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("Invalid value for countryCode") > 0) {
                        // 提交前已作判断，应该不会出现
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，当前国家不支持',field1='订单提交失败，当前国家不支持'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("ebayId is missing") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，请检查店铺的ebayid设置是否正确',field1='订单提交失败，请检查店铺的ebayid设置是否正确'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("Invalid value for contact") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，请检查联系人是否填写或是否长度超过30',field1='订单提交失败，请检查联系人是否填写或是否长度超过30'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage().indexOf("Insufficient balance") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，账户余额不足',field1='订单提交失败，账户余额不足'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else if (rsp.getStatus().getMessage()
                            .indexOf("consignee's consigneePhone should be numeric or specific special chars") > 0) {
                        String updateSql = "update db_asktradernumber set  errdescr='订单提交失败，请检查联系方式是否正确填写',field1='订单提交失败，请检查联系方式是否正确填写'  where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    } else {
                        String updateSql = "update db_asktradernumber set errflag = '98',errdescr = '获取单号失败，失败信息:"
                                + rsp.getStatus().getMessage().replace("'", "") + "',field1 = '获取单号失败，失败信息:"
                                + rsp.getStatus().getMessage().replace("'", "") + "' where orderid = '"
                                + eb.getOrder().getOrderid() + "' and ordertype='EdisEbay'";
                        "提交订单：" + eb.getOrder().getOrderid() + "失败，返回code：" + rsp.getStatus().getResultCode()
                                + "返回信息：" + rsp.getStatus().getMessage().replace("'", ""));
                        ebayMgr.updateExecuteSQL(updateSql);
                        "提交订单：" + eb.getOrder().getOrderid() + "失败，返回code：" + rsp.getStatus().getResultCode()
                                + "返回信息：" + rsp.getStatus().getMessage().replace("'", ""));
                        writerlog("commit",
                                "订单号：" + eb.getOrder().getOrderid() + "提交失败，订单返回数据：status:"
                                        + JSON.toJSONString(rsp.getStatus()) + "=======data:"
                                        + JSON.toJSONString(rsp.getData()) + "sql语句：asktradernumber:" + updateSql);
                    }
                }
            } catch (com.eis.client.ApiException e) {
                String updateSql = "update db_asktradernumber set errflag = '98',errdescr = '获取单号失败，失败信息:返回code："
                        + e.getCode() + "返回信息：" + JSON.toJSONString(e).replace("'", "")
                        + "',field1 = '获取单号失败，失败信息:返回code" + e.getCode() + "返回信息："
                        + JSON.toJSONString(e).replace("'", "") + "' where orderid = '" + eb.getOrder().getOrderid()
                        + "' and ordertype='EdisEbay'";
                +"返回信息：" + rsp.getStatus().getMessage());
                ebayMgr.updateExecuteSQL(updateSql);
                +"返回信息：" + rsp.getStatus().getMessage());
                writerlog("commit", "订单号：" + eb.getOrder().getOrderid() + "提交异常，异常信息：" + JSON.toJSONString(e)
                        + "sql语句：asktradernumber:" + updateSql);
            }
        } catch (Exception e) {
            String updateSql = "update db_asktradernumber set errflag = '98',errdescr = '提交订单异常：" + e.getMessage()
                    + "',field1 = '提交订单异常:" + e.getMessage() + "' where orderid = '" + eb.getOrder().getOrderid()
                    + "' and ordertype='EdisEbay'";
            ebayMgr.updateExecuteSQL(updateSql);
            writerlog("commit", "订单号：" + eb.getOrder().getOrderid() + "提交异常，异常信息：" + JSON.toJSONString(e)
                    + "sql语句：asktradernumber:" + updateSql);
        }
    }

    // TODO 确认订单

    /**
     * 提交后确认订单
     *
     * @param num
     */
    @SuppressWarnings("unchecked")
    public void getTackingnumber(int num) {
        // 查找errflag=2等待确认的订单信息
        RetCode rt = ebayMgr.getPackageinfo(num, 2);
        ArrayList<DbAsktradernumber> list = (ArrayList<DbAsktradernumber>) rt.getObj();
        if (list != null && list.size() > 0) {
            try {
                int i = 0;
                for (DbAsktradernumber bean : list) {
                    String ebayid = bean.getField4();
                    i++;
                    try {
                        List<String> packageIds = new ArrayList<String>();
                        packageIds.add(bean.getField3());
                        EbayClient client = new DefaultEbayClient(url, bean.getField1());
                        ConfirmPackagesRequest req = new ConfirmPackagesRequest();
                        ConfirmPackagesRequestData date = new ConfirmPackagesRequestData();
                        date.setPackageIds(packageIds);
                        req.setEbayId(ebayid);
                        req.setMessageId("1");
                        req.setTimestamp(times);
                        req.setData(date);

                        writerlog("confirm", "确认订单提交信息：" + JSON.toJSONString(req));
                        try {
                            ConfirmPackagesResponses rsp = client.execute(req);
                            if (rsp.getStatus().getResultCode() == 200) {
                                // TODO 确认订单
                                String sql = "update db_asktradernumber set errflag = '3',errdescr='确认订单结果：提交成功，确认成功',field1='确认订单 成功' where orderid= '"
                                        + bean.getOrderid() + "'";
                                ebayMgr.updateExecuteSQL(sql);
                                writerlog("confirm", "确认订单：" + bean.getOrderid() + "成功，返回信息：status：" + rsp.getStatus()
                                        + "data:" + rsp.getData() + "sql语句:" + sql);
                            } else {
                                String sql = "update db_asktradernumber set errflag = '98',errdescr='确认订单结果：提交成功，确认失败，原因："
                                        + rsp.getData().get(0).getMessage() + "' ,field1='确认订单失败，原因："
                                        + rsp.getData().get(0).getMessage() + "'  where orderid= '" + bean.getOrderid()
                                        + "'";
                                ebayMgr.updateExecuteSQL(sql);
                                writerlog("confirm", "确认订单：" + bean.getOrderid() + "失败，返回信息：status：" + rsp.getStatus()
                                        + "data:" + rsp.getData() + "sql语句:" + sql);
                            }
                        } catch (com.eis.client.ApiException e) {
                            String read = JSON.toJSONString(e);
                            String sql = "update db_asktradernumber set errflag = '98',errdescr='确认订单结果：调确认接口异常："
                                    + e.getCode() + "异常信息：" + read + "',field1='确认订单异常：" + read + "' where orderid= '"
                                    + bean.getOrderid() + "'";
                            ebayMgr.updateExecuteSQL(sql);
                            writerlog("confirm",
                                    "确认订单：" + bean.getOrderid() + "异常=======================================>异常信息："
                                            + JSON.toJSONString(e) + "sql语句：" + sql);
                        }

                    } catch (Exception e) {
                        String updateSql = "update db_asktradernumber set errflag='98' " + "  ,errdescr='确认订单异常："
                                + e.getMessage() + "',field1='确认订单异常：" + e.getMessage() + "'  where orderid='"
                                + bean.getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                        writerlog("confirm",
                                "确认订单：" + bean.getOrderid() + "异常=======================================>异常信息："
                                        + JSON.toJSONString(e) + "sql语句：" + updateSql);
                    }
                }
            } catch (Exception e) {
                writerlog("confirm",
                        "确认订单：异常=======================================>异常信息：" + JSON.toJSONString(e) + "sql语句：");
            }
        } else {
        }
    }

    /**
     * 拉标签
     *
     * @param bean
     * @return
     * @throws Exception
     */
    public RetCode labelRequestData(DbAsktradernumber bean) throws Exception {
        RetCode rt = new RetCode(1000, "", "");
        String ebayid = bean.getField4();
        // 在下载PDF之前，先检查这个订单是不是之前已经交运了其他物流下载了标签，查到了先删掉之前的PDF标签
        String nfsPath = Constants.labepath + pdfpath;// 路径
        for (int j = 0; j < 4; j++) {
            String pdfFullname2 = "";
            if (j == 0) {
                pdfFullname2 = nfsPath + bean.getOrderid() + ".pdf";
            } else {
                pdfFullname2 = nfsPath + bean.getOrderid() + "_" + j + ".pdf";
            }
            File befFile2 = new File(pdfFullname2);
            if (befFile2.exists()) {// 存在就删除
                befFile2.delete();
            }
        }

        EbayClient client = new DefaultEbayClient(url, bean.getField1());
        GetLabelRequest req = new GetLabelRequest();
        req.setEbayId(ebayid);
        req.setMessageId("1");
        req.setTimestamp(times);
        GetLabelRequestData reqData = new GetLabelRequestData();
        reqData.setPrintPreference("");
        reqData.setTrackingNumber(bean.getExpressid());
        reqData.setPageSize("1");
        req.setData(reqData);
        GetLabelResponses rsp = null;
        rsp = client.execute(req);
        if (rsp.getStatus().getResultCode() == 200) {
            rt.setCode(0);
        }
        System.out.println(rsp.getData().getBase64Str());

        // 保存pdf
        BASE64Decoder decoder = new BASE64Decoder();
        BufferedInputStream bis = null;
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;

        try {
            byte[] bytes = decoder.decodeBuffer(rsp.getData().getBase64Str());// base64编码内容转换为字节数组
            ByteArrayInputStream byteInputStream = new ByteArrayInputStream(bytes);
            bis = new BufferedInputStream(byteInputStream);
            File file = new File(nfsPath + bean.getOrderid() + ".pdf");
            File path = file.getParentFile();
            if (!path.exists()) {
                path.mkdirs();
            }
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos);

            byte[] buffer = new byte[1024];
            int length = bis.read(buffer);
            while (length != -1) {
                bos.write(buffer, 0, length);
                length = bis.read(buffer);
            }
            bos.flush();
            bos.close();
            fos.close();

            // 小于5KB的标签文件，认为PDF文件是无效的，重新拉取标签 zyj 20170512
            if ((file.length() / 1024) < 5) {
                rt.setCode(999);
                rt.setDesc("PDF文件大小为" + file.length() / 1024 + "KB");
                // System.out.println(file.length());
            } else {
                /* 有可能db_orderlable_transform表里已经存在了这个订单的PDF任务了 */
                String sql1 = "delete db_orderlable_transform where orderid='" + bean.getOrderid() + "'";
                ebayMgr.updateExecuteSQL(sql1);
                System.out.println("插入语句sql： " + sql1);

                System.out.println("插入时间 ： " + Sys.getCtime2());
                String sql = "insert into db_orderlable_transform (id,downloadtime,orderid,flag,picnum)values(DOWNLOADORDERID.nextval,to_date('"
                        + Sys.getCtime2() + "','yyyy-mm-dd  hh24:mi:ss'),'" + bean.getOrderid() + "',3,0)";
                RetCode rtsCode = ebayMgr.updateExecuteSQL(sql);
                System.out.println("插入语句sql： " + sql);
                if (rtsCode.getCode() == 0) {
                    rt.setCode(0);
                    rt.setDesc("保存PDF标签成功");
                } else {
                    rt.setCode(1000);
                    rt.setDesc("保存PDF标签失败，原因：" + rtsCode.getDesc());
                }
            }

        } catch (Exception e) {
            // 获取失败
            rt.setCode(1000);
            rt.setDesc("保存PDF标签时出错，原因：" + e.getMessage());
        }

        return rt;
    }

    /**
     * 提交订单报存在其他包裹中时获取单号与包裹id
     *
     * @param sellBean
     * @param token
     */
    private void getItemPackageId(SellBean sellBean, String token, DbEdisExpressType deet) {
        EbayClient client = new DefaultEbayClient(url, token);
        GetItemPackageIdRequest req = new GetItemPackageIdRequest();
        GetItemPackageIdRequestData reqData = new GetItemPackageIdRequestData();
        req.setEbayId(sellBean.getShop().getEbayshopid());
        req.setMessageId("1");
        req.setTimestamp(times);
        reqData.setItemId(sellBean.getSell().getEbayitemid());
        reqData.setTransactionId(sellBean.getSell().getTransactionid());
        req.setData(reqData);
        GetItemPackageIdResponses rsp = null;
        try {
            rsp = client.execute(req);
            /*
             * { "data": [{ "packageId": "2901627869003836", "trackingNumber":
             * "ES1000002910358IB01010001B0A" }], "status": { "message":
             * "success", "messageId": "sadasds", "resultCode": 200,
             * "timestamp": 1527486538739 } }
             */
            if (rsp.getStatus().getResultCode() == 200 && rsp.getData() != null && rsp.getData().size() > 0
                    && rsp.getData().get(0).getPackageId() != null) {
                if (rsp.getData().get(0).getTrackingNumber() != null
                        && rsp.getData().get(0).getTrackingNumber().length() > 0) {
                    // 如果有返回运单号
                    +rsp.getData().get(0).getTrackingNumber() + "包裹号：" + rsp.getData().get(0).getPackageId());
                    String updateSql = "update db_asktradernumber set  expressid = '"
                            + rsp.getData().get(0).getTrackingNumber() + "', errflag='3' , errdescr='获取运单号成功，运单号："
                            + rsp.getData().get(0).getTrackingNumber() + "包裹号：" + rsp.getData().get(0).getPackageId()
                            + " ',field1='获取运单号成功，运单号：" + rsp.getData().get(0).getTrackingNumber() + "包裹号："
                            + rsp.getData().get(0).getPackageId() + "'  where orderid = '"
                            + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                    ebayMgr.updateExecuteSQL(updateSql);
                    String updateSql2 = "update db_order set  expressid = '" + rsp.getData().get(0).getTrackingNumber()
                            + "',customerreserve7='" + rsp.getData().get(0).getPackageId() + "'  where orderid = '"
                            + sellBean.getSell().getOrderid() + "'";
                    ebayMgr.updateExecuteSQL(updateSql2);
                } else {
                    // 如果只返回包裹号
                    GetItemPackageIdResponsesData response = rsp.getData().get(0);
                    RetCode rt = getPackageStatus(sellBean, token, response.getPackageId());
                    if (rt.getCode() == 0) {
                        GetPackageStatusResponsesData gd = (GetPackageStatusResponsesData) rt.getObj();
                        if (gd.getPackageStatus() == 1) {
                            // 返回值： 0 - 信息不完整;1 - 待选择物流服务;2 - 待申请运单号;3 - 待交运;4 -
                            // 无可用物流服务;5 - 预申报未通过;6 - 待取件;7 - 揽收成功;8 - 运输中;9 -
                            // 已妥投;10 - 投递失败;11 - 已删除;99 - 包裹异常"
                            assignService(sellBean, response.getPackageId(), deet, token);
                        } else if (gd.getPackageStatus() == 2) {
                            +response.getPackageId() + "包裹状态：" + gd.getPackageStatus() + ":" + gd.getNote());
                            writerlog("commit",
                                    "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取包裹号成功："
                                            + JSON.toJSONString(rsp) + ",包裹状态为：" + JSON.toJSONString(gd));
                            String updateSql = "update db_asktradernumber set errdescr='获取运单号失败，包裹状态："
                                    + gd.getPackageStatus() + ":" + gd.getNote() + "',field1='获取运单号失败，包裹状态："
                                    + gd.getPackageStatus() + ":" + gd.getNote() + "'  where orderid = '"
                                    + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                            ebayMgr.updateExecuteSQL(updateSql);
                        } else {
                            +response.getPackageId() + "包裹状态：" + gd.getPackageStatus() + ":" + gd.getNote());
                            writerlog("commit",
                                    "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取包裹号成功："
                                            + JSON.toJSONString(rsp) + ",包裹状态为：" + JSON.toJSONString(gd));
                            String updateSql = "update db_asktradernumber set errflag='98' , errdescr='获取运单号失败，包裹状态："
                                    + gd.getPackageStatus() + ":" + gd.getNote() + "',field1='获取运单号失败，包裹状态："
                                    + gd.getPackageStatus() + ":" + gd.getNote() + "'  where orderid = '"
                                    + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                            ebayMgr.updateExecuteSQL(updateSql);
                        }
                    } else {
                        +response.getPackageId() + "获取包裹状态失败：" + rt.getDesc());
                        writerlog("commit",
                                "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取包裹号成功："
                                        + JSON.toJSONString(rsp) + ",获取包裹失败：" + rt.getDesc());
                        String updateSql = "update db_asktradernumber set errflag='98' , errdescr='获取运单号失败，获取包裹状态失败："
                                + rt.getDesc() + "',field1='获取运单号失败，获取包裹状态失败：" + rt.getDesc() + "'  where orderid = '"
                                + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                        ebayMgr.updateExecuteSQL(updateSql);
                    }

                }

            } else {
                if (rsp.getStatus().getMessage().indexOf("No transaction records were found") >= 0) {
                    "订单" + sellBean.getSell().getOrderid() + "获取包裹号失败，原因：" + rsp.getStatus().getMessage());
                    String updateSql = "update db_asktradernumber set   errdescr='获取包裹号失败，原因："
                            + rsp.getStatus().getMessage() + "稍后继续请求 ',field1='获取包裹号失败，原因："
                            + rsp.getStatus().getMessage() + "稍后继续请求  '  where orderid = '"
                            + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                    ebayMgr.updateExecuteSQL(updateSql);
                } else {
                    "订单" + sellBean.getSell().getOrderid() + "获取包裹号失败，原因：" + rsp.getStatus().getMessage());
                    String updateSql = "update db_asktradernumber set errflag='98' , errdescr='获取包裹号失败，原因："
                            + rsp.getStatus().getMessage() + "',field1='获取运单号失败，原因：" + rsp.getStatus().getMessage()
                            + "'  where orderid = '" + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                    ebayMgr.updateExecuteSQL(updateSql);
                    writerlog("commit", "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取包裹号失败："
                            + JSON.toJSONString(rsp));
                }
            }
        } catch (com.eis.client.ApiException e) {
            String updateSql = "update db_asktradernumber set errflag='98' , errdescr='获取包裹号异常，原因：" + e.getMessage()
                    + "',field1='获取包裹号异常，原因：" + e.getMessage() + "'  where orderid = '"
                    + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
            ebayMgr.updateExecuteSQL(updateSql);
            writerlog("commit", "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取包裹号异常："
                    + JSON.toJSONString(rsp));
        }
    }

    /**
     * 指定物流服务
     *
     * @param sellBean
     * @param packageId
     * @param deet
     * @param token
     */
    private void assignService(SellBean sellBean, String packageId, DbEdisExpressType deet, String token) {
        EbayClient client = new DefaultEbayClient(url, token);
        AssignServiceRequest req = new AssignServiceRequest();
        List<AssignServiceRequestData> data = new ArrayList<AssignServiceRequestData>();
        AssignServiceRequestData reqData = new AssignServiceRequestData();
        reqData.setPackageId(packageId);
        reqData.setServiceId(deet.getSid());
        data.add(reqData);
        req.setEbayId(sellBean.getShop().getEbayshopid());
        req.setMessageId("1");
        req.setTimestamp(times);
        req.setData(data);

        AssignServiceResponses rsp = null;
        try {
            rsp = client.execute(req);
            if (rsp.getStatus().getResultCode() == 200 && rsp.getData() != null && rsp.getData().size() > 0
                    && rsp.getData().get(0).getTrackingNumber() != null) {
                AssignServiceResponsesData response = rsp.getData().get(0);
                "订单" + sellBean.getSell().getOrderid() + "获取运单号成功，运单号：" + response.getTrackingNumber());
                writerlog("commit", "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取运单号成功："
                        + JSON.toJSONString(rsp));
                String updateSql = "update db_asktradernumber set expressid = '" + response.getTrackingNumber()
                        + "', errflag='3' , errdescr='获取运单号成功，运单号：" + response.getTrackingNumber() + ",包裹号："
                        + response.getPackageId() + "',field1='获取运单号成功，运单号：" + response.getTrackingNumber() + ",包裹号："
                        + response.getPackageId() + "'  where orderid = '" + sellBean.getSell().getOrderid()
                        + "' and ordertype='EdisEbay'";
                ebayMgr.updateExecuteSQL(updateSql);
                String updateSql2 = "update db_order set  expressid = '" + response.getTrackingNumber()
                        + "',customerreserve7='" + response.getPackageId() + "'  where orderid = '"
                        + sellBean.getSell().getOrderid() + "'";
                ebayMgr.updateExecuteSQL(updateSql2);
            } else {
                "订单" + sellBean.getSell().getOrderid() + "获取运单号失败，运单号：" + rsp.getStatus().getMessage());

                String updateSql = "update db_asktradernumber set errflag='98' , errdescr='获取运单号失败，原因："
                        + rsp.getStatus().getMessage() + "',field1='获取运单号失败，原因：" + rsp.getStatus().getMessage()
                        + "'  where orderid = '" + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
                ebayMgr.updateExecuteSQL(updateSql);
                writerlog("commit", "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取运单号失败："
                        + JSON.toJSONString(rsp) + "sql:" + updateSql);
            }
        } catch (ApiException e) {
            String updateSql = "update db_asktradernumber set errflag='98'  ,errdescr='获取运单号异常，原因：" + e.getMessage()
                    + "',field1='获取运单号异常，原因：" + e.getMessage() + "'  where orderid = '"
                    + sellBean.getSell().getOrderid() + "' and ordertype='EdisEbay'";
            ebayMgr.updateExecuteSQL(updateSql);
            writerlog("commit", "订单：" + sellBean.getSell().getOrderid() + "has been in other package,获取运单号异常："
                    + JSON.toJSONString(rsp));
        }

    }

    /**
     * 获取包裹状态
     *
     * @param sellBean
     * @param token
     * @param packageId
     * @return
     */
    public RetCode getPackageStatus(SellBean sellBean, String token, String packageId) {
        RetCode rt = new RetCode(1000, "", "");
        try {
            EbayClient client = new DefaultEbayClient(url, token);
            GetPackageStatusRequest req = new GetPackageStatusRequest();
            req.setTimestamp(times);
            req.setMessageId("1");
            req.setEbayId(sellBean.getShop().getEbayshopid());
            GetPackageStatusRequestData data = new GetPackageStatusRequestData();
            data.setPackageId(packageId);
            req.setData(data);
            GetPackageStatusResponses rsp = client.execute(req);
            if (rsp.getStatus().getResultCode() == 200) {
                rt.setCode(0);
                rt.setObj(rsp.getData());
            } else {
                rt.setCode(1000);
                rt.setDesc(rsp.getStatus().getMessage());
            }
        } catch (ApiException e) {
            rt.setCode(999);
            rt.setDesc(e.getMessage());
        } catch (Exception e) {
            rt.setCode(999);
            rt.setDesc(e.getMessage());
        }
        return rt;
    }

    // 订单长宽高判断
    private BigDecimal numConvert(Number num) {
        if (num == null || num.toString() == "" || (Integer) num < 1) {
            return new BigDecimal(20);
        }
        return new BigDecimal(num.toString());
    }
